@page "/schedule/add"
@using BlazorApp1.Components.Layout
@inject ScheduleItemService ScheduleItemService


<div style="flex: 2"></div>
<div class="wrapper" style="display: flex; flex-direction: column; flex: 6">
    <NavMenu/>

    <div style="display: flex; flex-direction: column; justify-content: center">
        <h1 style="color: whitesmoke; vertical-align: center">Schedule Items</h1>
        <div class="carousel-container" style="flex: 1; display:flex; align-items: center">
            <div class="carousel" style="flex: 1">
                @if (Next7Days.Any())
                {
                    @for (int i = 0; i < Next7Days.Count; i++)
                    {
                        var index = i;
                        <div class="carousel-item @(index == SelectedDateIndex ? "active" : "")"
                             @onclick="() => SelectDate(index)">
                            @Next7Days[index].ToShortDateString()
                        </div>
                    }
                }
                else
                {
                    <div>No days available.</div>
                }
            </div>
        </div>

        <div style="flex: 6">
            @if (SelectedDate != null)
            {
                <h4 style="color:whitesmoke; text-align: center">Schedule for @SelectedDate.Value.ToShortDateString()</h4>
                <table class="table table-bordered" style="color: whitesmoke">
                    <thead>
                    <tr>
                        <th>Title</th>
                        <th>Time</th>
                        <th>Location</th>
                        <th>Host</th>
                        <th>Description</th>
                        <th>Vacancies</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (ScheduleItems != null && ScheduleItems.Any())
                    {
                        @foreach (var item in ScheduleItems)
                        {
                            <tr @onclick="@(() => Show(item.Id))">
                                <td>@item.Title</td>
                                <td>@item.Date.ToShortTimeString()</td>
                                <td>@item.Location</td>
                                <td>@item.Host</td>
                                <td>@item.Description</td>
                                <td>@item.Vacancies</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">No schedule items available for this date.</td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                <div>No date selected.</div>
            }
        </div>
        <button @onclick="@Add" id="addButton">Add</button>

        @if (scheduleItems != null && mode == MODE.Add)
        {
            <input placeholder="Location" @bind="@location" />
            <br />
            <input placeholder="Title" @bind="@title" />
            <br />
            <input placeholder="Host" @bind="@host" />
            <br />
            <input placeholder="Description" @bind="@description" />
            <br />
            <input type="date" @bind="@date" />
            <br />
            <input type="time" @bind="@date" />
            <br />
            <input type="number" @bind="@vacancies" />

            <button @onclick="@Insert" class="btn btn-warning">Insert</button>
        }

        @if (scheduleItems != null && mode == MODE.EditDelete)
        {
            <input type="hidden" @bind="@id"/>
            <br/>
            <input placeholder="Location" @bind="@location"/>
            <br/>
            <input placeholder="Title" @bind="@title"/>
            <br/>
            <input placeholder="Host" @bind="@host"/>
            <br/>
            <input placeholder="Description" @bind="@description"/>
            <br/>
            <input type="date" @bind="@date"/>
            <br/>
            <input type="number" @bind="@vacancies"/>
            <br/>
            <button @onclick="@Delete" class="btn btn-danger">Delete</button>
            <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
            <button @onclick="@Update" class="btn btn-primary">Update</button>
            
        }
    </div>
</div>
<div style="flex: 2"></div>

@code {
    int id;
    string location;
    string title;
    string host;
    string description;
    DateTime date;
    int vacancies;
    
    private List<DateTime> Next7Days { get; set; } = new List<DateTime>();
    private DateTime? SelectedDate { get; set; }
    private int SelectedDateIndex { get; set; } = 0;
    private List<ScheduleItem> ScheduleItems { get; set; } = new List<ScheduleItem>();

    protected override async Task OnInitializedAsync()
    {
        CalculateNext7Days();
        await LoadScheduleForSelectedDate();
        await Load();
    }

    private void CalculateNext7Days()
    {
        var today = DateTime.Today;
        Next7Days = Enumerable.Range(0, 7)
            .Select(offset => today.AddDays(offset))
            .ToList();
        
        if (Next7Days.Count > 0)
        {
            SelectedDate = Next7Days[0];
        }
    }

    private async Task LoadScheduleForSelectedDate()
    {
        if (SelectedDate != null)
        {
            try
            {
                var allItems = await ScheduleItemService.GetScheduleItemsAsync();
                // Filter items to include only those for the selected date
                ScheduleItems = allItems
                    .Where(item => item.Date.Date == SelectedDate.Value.Date)
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            StateHasChanged(); 
        }
        else
        {
            Console.WriteLine("No date selected.");
        }
    }

    private async Task SelectDate(int index)
    {
        if (index >= 0 && index < Next7Days.Count)
        {
            SelectedDateIndex = index;
            SelectedDate = Next7Days[index];
            await LoadScheduleForSelectedDate();
        }
        else
        {
            Console.WriteLine("Invalid date index selected: " + index);
        }
    }

    ScheduleItem selectedScheduleItem;
    
    private enum MODE
    {
        None,
        Add,
        EditDelete
    };
    MODE mode = MODE.None;
    
    List<ScheduleItem> scheduleItems;
    
    protected async Task Load()
    {
        scheduleItems = await ScheduleItemService.GetScheduleItemsAsync();
    }
    
    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
    }
    
    protected void ClearFields()
    {
        id = -1;
        location = string.Empty;
        title = string.Empty;
        host = string.Empty;
        description = string.Empty; 
        date = DateTime.Now;
        vacancies = 0;
    }
    
    protected async Task Insert()
    {
        ScheduleItem s = new ScheduleItem()
        {
            Location = location,
            Title = title,
            Host = host,
            Description = description,
            Date = date,
            Vacancies = vacancies
        };
        await ScheduleItemService.InsertScheduleItemAsync(s);
        ClearFields();
        await Load();
        mode = MODE.None;
    }
    protected async Task Show(int id)
    {
        selectedScheduleItem = await ScheduleItemService.GetScheduleItemByIdAsync(id);
        location = selectedScheduleItem.Location;
        title = selectedScheduleItem.Title;
        host = selectedScheduleItem.Host;
        description = selectedScheduleItem.Description;
        date = selectedScheduleItem.Date;
        vacancies = selectedScheduleItem.Vacancies;
        mode = MODE.EditDelete;
    }
    protected async Task Update()
    {
        ScheduleItem s = new ScheduleItem()
        {
            Id = id,
            Location = location,
            Title = title,
            Host = host,
            Description = description,
            Date = date,
            Vacancies = vacancies
        };
        await ScheduleItemService.UpdateScheduleItemAsync(id, s);
        ClearFields();
        await Load();
        mode = MODE.None;
        StateHasChanged();
    }

    protected async Task Delete()
    {
        await ScheduleItemService.DeleteScheduleItemAsync(id);
        ClearFields();
        await Load();
        StateHasChanged();
    }

}
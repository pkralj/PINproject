@page "/schedule"
@using BlazorApp1.Components.Layout
@inject ScheduleItemService ScheduleItemService
@inject NavigationManager NavigationManager

<div style="flex: 2"></div>
<div class="wrapper" style="display: flex; flex-direction: column; flex: 6">
    <NavMenu/>


    <div class="carousel-container" style="flex: 1; display:flex; align-items: center">
        <div class="carousel" style="flex: 1">
            @if (Next7Days.Any())
            {
                @for (int i = 0; i < Next7Days.Count; i++)
                {
                    var index = i;
                    <div class="carousel-item @(index == SelectedDateIndex ? "active" : "")"
                         @onclick="() => SelectDate(index)">
                        @Next7Days[index].ToShortDateString()
                    </div>
                }
            }
            else
            {
                <div>No days available.</div>
            }
        </div>
    </div>

    <div style="flex: 6">
        @if (SelectedDate != null)
        {
            <h4 style="color:whitesmoke; text-align: center">Schedule for @SelectedDate.Value.ToShortDateString()</h4>
            <table class="table table-bordered" style="color: whitesmoke">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Time</th>
                    <th>Location</th>
                    <th>Host</th>
                    <th>Description</th>
                    <th>Vacancies</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @if (ScheduleItems != null && ScheduleItems.Any())
                {
                    @foreach (var item in ScheduleItems)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Date.ToShortTimeString()</td>
                            <td>@item.Location</td>
                            <td>@item.Host</td>
                            <td>@item.Description</td>
                            <td>@item.Vacancies</td>
                            @if (item.Vacancies > 0)
                            {
                                <td><button id="applyButton">Apply</button></td>
                            }
                            else
                            {
                                <td><button id="applyButton" disabled>Full</button></td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7">No schedule items available for this date.</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <div>No date selected.</div>
        }
    </div>
</div>
<div style="display:flex; flex: 2; flex-direction: column">
    <div style="flex: 1"></div>
    <div style="flex: 1; align-content: flex-end">
        <button id="addNewScheduleButton" @onclick='() => NavigationManager.NavigateTo("schedule/add")'>Add Schedule Item</button>
    </div>
    <div style="flex: 1"> </div>
</div>



@code {
    private List<DateTime> Next7Days { get; set; } = new List<DateTime>();
    private DateTime? SelectedDate { get; set; }
    private int SelectedDateIndex { get; set; } = 0;
    private List<ScheduleItem> ScheduleItems { get; set; } = new List<ScheduleItem>();

    protected override async Task OnInitializedAsync()
    {
        CalculateNext7Days();
        await LoadScheduleForSelectedDate();
    }

    private void CalculateNext7Days()
    {
        var today = DateTime.Today;
        Next7Days = Enumerable.Range(0, 7)
            .Select(offset => today.AddDays(offset))
            .ToList();
        
        if (Next7Days.Count > 0)
        {
            SelectedDate = Next7Days[0];
        }
    }

    private async Task LoadScheduleForSelectedDate()
    {
        if (SelectedDate != null)
        {
            try
            {
                var allItems = await ScheduleItemService.GetScheduleItemsAsync();
                // Filter items to include only those for the selected date
                ScheduleItems = allItems
                    .Where(item => item.Date.Date == SelectedDate.Value.Date)
                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            StateHasChanged(); 
        }
        else
        {
            Console.WriteLine("No date selected.");
        }
    }

    private async Task SelectDate(int index)
    {
        if (index >= 0 && index < Next7Days.Count)
        {
            SelectedDateIndex = index;
            SelectedDate = Next7Days[index];
            await LoadScheduleForSelectedDate();
        }
        else
        {
            Console.WriteLine("Invalid date index selected: " + index);
        }
    }
}

@page "/Login"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject AppState AppState

<div id="login_container" style="flex:1; display: flex"> 
    <div style="flex: 3"></div>
    <div style="flex: 2; align-content: center; ">
        <h3 style="color:whitesmoke; text-align: center">Login</h3>
        <br/><br/>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" style="align-content: center; justify-content: center">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label style="color: whitesmoke" for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <br/>

            <div class="form-group">
                <label style="color: whitesmoke" for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <br/>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
        <br/><br/>
        
        @if (loginFailed)
        {
            <div class="alert alert-danger" style="text-align: center">Invalid username or password</div>
        }
        
    </div>
    <div style="flex: 3"></div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool loginFailed = false;
    [Inject] private NavigationManager Navigation { get; set; }

    private void HandleLogin()
    {
        // Simulate a login check - replace this with actual authentication logic
        if (loginModel.Username == "admin" && loginModel.Password == "password")
        {
            AppState.IsLoggedIn = true;
            loginFailed = false;
            Navigation.NavigateTo("/");
        }
        else
        {
            // Login failed
            loginFailed = true;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
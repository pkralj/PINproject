@page "/login"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject UserAccountService UserAccountService
@inject AppState AppState
@inject AdminState AdminState


<div id="login_container" style="flex:1; display: flex"> 
    <div style="flex: 3"></div>
    <div style="flex: 2; align-content: center; ">
        @if (isRegistering)
        {
        <h3 style="color:whitesmoke; text-align: center">Register</h3>
        <br/><br/>
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" style="align-content: center; justify-content: center">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label style="color: whitesmoke" for="registerUsername">Username</label>
                <InputText id="registerUsername" class="form-control" @bind-Value="registerModel.Username" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>
            <br/>

            <div class="form-group">
                <label style="color: whitesmoke" for="registerPassword">Password</label>
                <InputText id="registerPassword" type="password" class="form-control" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <br/>

            <div class="form-group">
                <label style="color: whitesmoke" for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
            <br/>

            <button type="submit" id="registerButton">Register</button>
        </EditForm>
        <br/><br/>

        @if (registerFailed)
        {
        <div class="alert alert-danger" style="text-align: center">@registerErrorMessage</div>
        }

        <p style="color: whitesmoke; text-align: center">Already have an account?
            <a class="loginSwitch" href="javascript:void(0)" @onclick="() => isRegistering = false" style="color:pink;">Login here</a>
        </p>
        }
        else
        {
            <h3 style="color:whitesmoke; text-align: center">Login</h3>
            <br/>
            <br/>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" style="align-content: center; justify-content: center">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label style="color: whitesmoke" for="username">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username"/>
                    <ValidationMessage For="@(() => loginModel.Username)"/>
                </div>
                <br/>

                <div class="form-group">
                    <label style="color: whitesmoke" for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password"/>
                    <ValidationMessage For="@(() => loginModel.Password)"/>
                </div>
                <br/>
                <button type="submit" id="loginButton">Login</button>
            </EditForm>
            <br/>
            <br/>

            @if (loginFailed)
            {
                <div class="alert alert-danger" style="text-align: center">Invalid username or password</div>
            }

            <p style="color: whitesmoke; text-align: center">Don't have an account?
                <a class="loginSwitch" href="javascript:void(0)" @onclick="() => isRegistering = true" style="color:pink ;">Register here</a>
            </p>
        }
    </div>
    <div style="flex: 3"></div>
</div>

@code {
    //TODO: Configure clearing input fields when switching between login and register
    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private bool loginFailed = false;
    private bool registerFailed = false;
    private bool isRegistering = false;
    private string registerErrorMessage = "An error occurred while registering";
    
    [Inject] private NavigationManager Navigation { get; set; }

    private async Task HandleLogin()
    {
        var users = await UserAccountService.GetUserAccountsAsync();
        var user = users.FirstOrDefault(u => u.Username == loginModel.Username && u.Password == loginModel.Password);
        
        if (user != null) {
            AppState.IsLoggedIn = true;
            AppState.UserId = user.Id;
            loginFailed = false;
            if (user.isAdmin)
            {
                AdminState.isAdmin = true;
            }
            Navigation.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
        }
    }
    
    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            registerFailed = true;
            registerErrorMessage = "Passwords do not match.";
            return;
        }

        var users = await UserAccountService.GetUserAccountsAsync();
        if (users.Any(u => u.Username == registerModel.Username))
        {
            registerFailed = true;
            registerErrorMessage = "Username already exists.";
            return;
        }

        var newUser = new UserAccount
        {
            Username = registerModel.Username,
            Password = registerModel.Password,  
        };
        
        await UserAccountService.InsertUserAccountAsync(newUser);
        
        registerFailed = false;
        isRegistering = false;
    }


    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
    
    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}